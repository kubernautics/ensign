# https://www.me2digital.com/blog/2019/05/haproxy-sni-routing/
# https://github.com/openshift/router/blob/master/images/router/haproxy/conf/haproxy-config.template
global
    log stdout  format raw  daemon debug
    log-send-hostname haproxy-droplet
    stats socket ipv4@127.0.0.1:9999 level admin
    stats socket /var/lib/haproxy/stats
    stats timeout 2m
    maxconn                 4000

    # SSL Tuneables
    ssl-server-verify none
    tune.ssl.default-dh-param 3072
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.1 no-tls-tickets
    ssl-default-server-options ssl-min-ver TLSv1.1 no-tls-tickets
 
defaults
    mode                    tcp
    log                     global
    option                  dontlognull
    option                  srvtcpka
    option                  log-separate-errors
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           2m
    timeout connect         10s
    timeout client          5m
    timeout server          5m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 1000

######################################################################
# Redirect *:80 frontend  
frontend http-redirect
	mode http
	bind :::80 v4v6
        option httplog
        tcp-request inspect-delay 5s
        tcp-request content accept if HTTP
        http-request redirect scheme https unless { ssl_fc }

######################################################################
# Primary Frontend  
frontend ssl_public
        bind :::443 v4v6 ssl crt /root/letsencrypt/bundle/ 
	#default_backend haproxy_ocp4_stats
        default_backend localhost_sni
	option tcplog
        log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq ssl_fc_has_sni '%[ssl_fc_has_sni]' sni:'%[capture.req.hdr(0)]' ssl_fc_sni '%[ssl_fc_sni]' ssl_fc_protocol '%[ssl_fc_protocol]' ssl_bc '%[ssl_bc]' ssl_bc_alpn '%[ssl_bc_alpn]' ssl_bc_protocol '%[ssl_bc_protocol]' ssl_c_i_dn '%[ssl_c_i_dn()]' ssl_c_s_dn '%[ssl_c_s_dn()]' ssl_f_i_dn '%[ssl_f_i_dn()]' ssl_f_s_dn '%[ssl_f_s_dn]' ssl_fc_cipher '%[ssl_fc_cipher]' "
        tcp-request inspect-delay 5s
        tcp-request content capture req.ssl_sni len 25
        tcp-request content accept if { req.ssl_hello_type 1 }

##################################################################################
# https incoming traffic 
#frontend https-in
#    bind 127.0.0.1:1044 accept-proxy ssl strict-sni alpn h2,http/1.1 crt /root/letsencrypt/bundle/ 
#    
#    mode http
#    option forwardfor
#    option httplog
#    option http-use-htx
#    option http-ignore-probes
#
#    http-request del-header Proxy
#
#    http-request set-header Host %[req.hdr(host),lower]
#    http-request set-header X-Forwarded-Proto https
#    http-request set-header X-Forwarded-Host %[req.hdr(host),lower]
#    http-request set-header X-Forwarded-Port %[dst_port]
#    http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
#    http-request add-header Forwarded for=\"[%[src]]\";host=%[req.hdr(host),lower];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
#
#    use_backend %[req.hdr(host),lower,map(/root/backend.map)]
#
##################################################################################
# ACL Rules
# Domain Name App Routes
use_backend openwrt01          if { hdr_end(host) -i  gw01.braincraft.io }
use_backend openwrt02          if { hdr_end(host) -i  gw02.braincraft.io }
use_backend lxd_images         if { hdr_end(host) -i  images.braincraft.io }
use_backend irclounge          if { hdr_end(host) -i  irc.braincraft.io }
use_backend haproxy_ocp4_stats if { hdr_end(host) -i  ocp4lb.ministack.dev }
use_backend console_ocp4_oauth if { hdr_end(host) -i  oauth-openshift.apps.ocp4.ministack.dev }
use_backend console_ocp4       if { hdr_end(host) -i  console-openshift-console.apps.ocp4.ministack.dev }
use_backend console_ocp4       if { hdr_end(host) -i  grafana-openshift-monitoring.apps.ocp4.ministack.dev }

##################################################################################
backend localhost_sni
    server frontend_sni 127.0.0.1:10444 weight 10 send-proxy-v2-ssl-cn

backend console_ocp4_oauth
    mode http
    option http-use-htx
    server haproxy 10.10.20.100:443 check ssl check-ssl verify none check-sni str('oauth-openshift.apps.ocp4.ministack.dev') sni str('oauth-openshift.apps.ocp4.ministack.dev') ssl-min-ver TLSv1.2

backend console_ocp4
    mode http
    option http-use-htx
    #server haproxy 10.10.20.100:443 check ssl
    server haproxy 10.10.20.100:443 check ssl check-ssl verify none check-sni str('console-openshift-console.apps.ocp4.ministack.dev') sni str('console-openshift-console.apps.ocp4.ministack.dev') ssl-min-ver TLSv1.2

backend haproxy_ocp4_stats
    mode http
    balance roundrobin
    option httpclose
    option forwardfor
    server haproxy 10.10.20.100:9000

backend openwrt01
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server openwrt 10.10.91.1:80 maxconn 1000

backend openwrt02
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server openwrt 10.10.20.1:80 maxconn 1000

backend lxd_images
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server lxd_images 10.10.91.11:8443 ssl maxconn 1000

backend irclounge
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server irclounge 10.10.91.61:9000 maxconn 1000 
    
############################################################################
#frontend front_xrdp
#    mode tcp
#    bind *:3389 name rdp
#    timeout client 1h
#    log global
#    option tcplog
#    tcp-request inspect-delay 2s
#    tcp-request content accept if RDP_COOKIE
#    default_backend back_xrdp
#    
#backend back_xrdp
#    mode tcp
#    balance leastconn
#    timeout server 1h
#    timeout connect 5s
#    log global
#    option tcp-check
#    tcp-check connect port 3389 ssl
#    default-server inter 3s rise 2 fall 3
#    server cloudctl 10.10.20.3:3389

