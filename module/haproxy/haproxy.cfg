global
    log         127.0.0.1 local2 notice
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
    ssl-server-verify none
    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
 
defaults
    log                     global
    mode                    http
    option                  httplog
    option                  dontlognull
    option                  http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 4000

######################################################################
# main frontend which proxys to the backends
frontend main
    bind *:5000
    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js
    use_backend static          if url_static
    default_backend             app

# static backend for serving up images, stylesheets and such
backend static
    balance     roundrobin
    server      static 127.0.0.1:4331 check

# round robin balancing between the various backends
backend app
    balance     roundrobin
    server  app1 127.0.0.1:5001 check
    server  app2 127.0.0.1:5002 check
    server  app3 127.0.0.1:5003 check
    server  app4 127.0.0.1:5004 check

######################################################################
# braincraft frontend  
# Redirect *:80 frontend  
frontend http-in
	mode http
	bind *:80
	bind *:8080
        #bind *:443 ssl crt /root/ssl/braincraft.io.pem no-tls-tickets ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES128-SHA:AES256-SHA256:AES256-SHA:RC4-SHA
        bind *:443 ssl crt /root/letsencrypt/bundle/ no-tls-tickets ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES128-SHA:AES256-SHA256:AES256-SHA:RC4-SHA
        bind *:6667 ssl crt /root/letsencrypt/bundle/ no-tls-tickets ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES128-SHA:AES256-SHA256:AES256-SHA:RC4-SHA
	default_backend www
	option forwardfor
        redirect scheme https code 301 if !{ ssl_fc }

        # Define hosts based on domain names
	acl firewall01 hdr_end(host) -i gw01.braincraft.io
	acl firewall02 hdr_end(host) -i gw02.braincraft.io
	acl dctl hdr_end(host) -i dropctl.braincraft.io
	acl cctl hdr_end(host) -i cloudctl.braincraft.io
	acl images hdr_end(host) -i images.braincraft.io
	acl irc hdr_end(host) -i irc.braincraft.io
	acl znc hdr_end(host) -i znc.braincraft.io
	acl ocp4lb hdr_end(host) -i ocp4lb.braincraft.io
	acl ocp4console hdr_end(host) -i ocp4.braincraft.io

        ## figure out backend to use based on domainname
	use_backend openwrt01 if firewall01
	use_backend openwrt02 if firewall02
	use_backend dropctl if dctl 
	use_backend cloudctl if cctl 
	use_backend lxd_images if images
	use_backend irclounge if irc
	use_backend irc_znc if znc 
	use_backend haproxy_ocp4 if ocp4lb
	use_backend console_ocp4 if ocp4console

# backend for braincraft.io  
backend www
    mode http
    balance roundrobin  
    option httpclose
    option forwardfor
    server gw 127.0.0.1:8443 maxconn 1000

backend console_ocp4
    mode http
    balance roundrobin
    option httpclose
    option forwardfor
    server haproxy 10.10.20.119:6443 ssl

backend haproxy_ocp4
    mode http
    balance roundrobin
    option httpclose
    option forwardfor
    server haproxy 10.10.20.119:9000

backend openwrt01
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server openwrt 10.10.91.1:80 maxconn 1000

backend openwrt02
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server openwrt 10.10.20.1:80 maxconn 1000

backend dropctl
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server bungeecord 10.10.91.3:80 maxconn 1000 
    
backend cloudctl
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server bungeecord 10.10.20.3:80 maxconn 1000 
    
backend lxd_images
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server lxd_images 10.10.91.11:8443 ssl maxconn 1000

backend irclounge
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server irclounge 10.10.91.61:9000 maxconn 1000 
    
backend irc_znc
    mode http
    option httpclose
    option forwardfor
    balance roundrobin
    server irc_znc 10.10.91.124:8081 ssl maxconn 1000 

############################################################################
frontend front_xrdp
    mode tcp
    bind *:3389 name rdp
    timeout client 1h
    log global
    option tcplog
    tcp-request inspect-delay 2s
    tcp-request content accept if RDP_COOKIE
    default_backend back_xrdp
    
backend back_xrdp
    mode tcp
    balance leastconn
    timeout server 1h
    timeout connect 5s
    log global
    #stick-table type string len 32 size 10k expire 8h peers hapee
    #stick on rdp_cookie(mstshash)
    option tcp-check
    tcp-check connect port 3389 ssl
    default-server inter 3s rise 2 fall 3
    server cloudctl 10.10.20.3:3389

